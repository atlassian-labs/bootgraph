buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}

plugins {
    id 'java'
    id 'java-library'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'com.jfrog.artifactory' version '4.16.1'
    id 'signing'
}

repositories {
    jcenter()
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'signing'

    repositories {
        jcenter()
    }

    group = 'com.atlassian'
    version = 'TEST-0.0.16'

    dependencyManagement {
        dependencies {

            dependency 'org.jetbrains.kotlin:kotlin-stdlib:1.3.41'
            dependency 'org.jetbrains.kotlin:kotlin-reflect:1.3.41'
            dependency 'guru.nidi:graphviz-java:0.12.1'

            // Modules should import this in compileOnly scope to let users
            // import their own version of Spring!
            dependency 'org.springframework.boot:spring-boot-starter:2.2.2.RELEASE'
            dependency 'org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE'

            dependency 'org.junit.jupiter:junit-jupiter-api:5.5.2'
            dependency 'org.junit.jupiter:junit-jupiter-params:5.5.2'
            dependency 'org.junit.jupiter:junit-jupiter-engine:5.5.2'

            dependency 'org.jetbrains.kotlin:kotlin-test:1.3.41'
            dependency 'org.jetbrains.kotlin:kotlin-test-junit5:1.3.41'
        }
    }

    // default dependencies for all modules
    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib'
        implementation 'org.jetbrains.kotlin:kotlin-reflect'

        testCompile 'org.junit.jupiter:junit-jupiter-api'
        testCompile 'org.junit.jupiter:junit-jupiter-params'
        testCompile 'org.junit.jupiter:junit-jupiter-engine'

        testCompile 'org.jetbrains.kotlin:kotlin-test'
        testCompile 'org.jetbrains.kotlin:kotlin-test-junit5'
    }

    test {
        useJUnitPlatform()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    javadoc.failOnError = false
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    def pomConfig = {
        licenses {
            license {
                name "Apache License 2.0"
                url "http://www.apache.org/licenses/"
                distribution "repo"
            }
        }
        developers {
            developer {
                id "thombergs"
                name "Tom Hombergs"
                email "tom.hombergs@gmail.com"
            }
        }

        scm {
            url "https://github.com/atlassian-labs/bootgraph"
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourcesJar {
                    classifier "sources"
                }
                artifact javadocJar {
                    classifier "javadoc"
                }
                groupId project.group
                artifactId project.name
                version project.version
                pom.withXml {
                    def root = asNode()
                    root.appendNode('description', 'A library for graphing Spring Boot application code')
                    root.appendNode('name', project.name)
                    root.appendNode('url', 'https://github.com/atlassian-labs/bootgraph')
                    root.children().last() + pomConfig
                }
            }
        }
    }

    artifactory {
        publish {
            contextUrl = 'https://packages.atlassian.com/'

            repository {
                repoKey = 'central'
                username = System.env.ARTIFACTORY_USER
                password = System.env.ARTIFACTORY_KEY
            }
            defaults {
                publications('maven')
                publishIvy = false
            }
        }
    }

    signing {
        useInMemoryPgpKeys("$System.env.SIGNING_KEY", "$System.env.SIGNING_PASSWORD")
        sign publishing.publications.maven
    }

}